name: Docker Build and Push

# 触发条件配置
on:
  # 手动触发工作流
  workflow_dispatch:
    inputs:
      # 需要构建的GitHub仓库地址
      repo_url:
        description: 'GitHub 仓库地址 (支持 owner/repo 或完整的 Git URL)'
        required: true
        type: string
      # 要构建的分支名称
      branch:
        description: '分支名称'
        required: true
        default: 'main'
        type: string
      # Dockerfile 路径
      dockerfile_path:
        description: 'Dockerfile 在仓库中的路径 (例如: ./Dockerfile)'
        required: true
        default: './Dockerfile'
        type: string
      # 选择推送到的镜像仓库类型
      registry_type:
        description: '镜像仓库类型'
        required: true
        type: choice
        options:
          - dockerhub
          - aliyun
        default: 'dockerhub'
      # 是否为私有仓库
      is_private:
        description: '是否设置为私有'
        required: true
        type: boolean
        default: false
      # 阿里云镜像仓库地域（如果选择阿里云则必填）
      aliyun_region:
        description: '阿里云镜像仓库地域（例如：cn-hangzhou）'
        required: false
        type: string
        default: cn-hangzhou
      # 阿里云镜像仓库命名空间（如果选择阿里云则必填）
      aliyun_namespace:
        description: '阿里云镜像仓库命名空间'
        required: false
        type: string
        default: mmclouds

jobs:
  build:
    # 指定运行环境为最新版Ubuntu
    runs-on: ubuntu-latest
    
    steps:
    # 步骤1: 处理仓库地址格式
    - name: Process repository URL
      run: |
        REPO_URL="${{ github.event.inputs.repo_url }}"
        # 删除开头的 @ 符号（如果有）
        REPO_URL=${REPO_URL#@}
        # 删除结尾的 .git（如果有）
        REPO_URL=${REPO_URL%.git}
        
        # 如果是完整的 Git URL，提取 owner/repo 部分
        if [[ $REPO_URL == *"github.com"* ]]; then
          if [[ $REPO_URL == *"https://github.com/"* ]]; then
            # 处理 HTTPS URL 格式
            REPO_URL=$(echo $REPO_URL | sed -E 's|https://github.com/(.+)|\1|')
          elif [[ $REPO_URL == *"git@github.com:"* ]]; then
            # 处理 SSH URL 格式
            REPO_URL=$(echo $REPO_URL | sed -E 's|git@github.com:(.+)|\1|')
          fi
        fi
        
        echo "REPO_NAME=$REPO_URL" >> $GITHUB_ENV
        # 提取仓库名称（不包含所有者）
        REPO_SIMPLE_NAME=$(echo $REPO_URL | sed -E 's|.*/([^/]+)$|\1|')
        echo "DOCKER_IMAGE_NAME=$REPO_SIMPLE_NAME" >> $GITHUB_ENV
        
    # 步骤2: 检出指定的GitHub仓库代码
    - name: Checkout target repository
      uses: actions/checkout@v3
      with:
        repository: ${{ env.REPO_NAME }}
        ref: ${{ github.event.inputs.branch }}
        token: ${{ secrets.GH_TOKEN }}
    
    # 步骤3: 验证 Dockerfile 存在
    - name: Verify Dockerfile exists
      run: |
        if [ ! -f "${{ github.event.inputs.dockerfile_path }}" ]; then
          echo "错误：在路径 ${{ github.event.inputs.dockerfile_path }} 未找到 Dockerfile"
          exit 1
        fi
    
    # 步骤4: 设置时间戳变量
    - name: Set timestamp
      run: echo "TIMESTAMP=$(date +'%Y%m%d_%H%M%S')" >> $GITHUB_ENV
    
    # 步骤5: 如果是 DockerHub 私有仓库，创建或更新仓库
    - name: Create or update DockerHub repository if needed
      if: ${{ github.event.inputs.registry_type == 'dockerhub' && github.event.inputs.is_private == 'true' }}
      run: |
        # 检查仓库是否存在
        STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
          -H "Authorization: JWT ${{ secrets.DOCKERHUB_TOKEN }}" \
          "https://hub.docker.com/v2/repositories/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}/")
        
        if [ "$STATUS" = "404" ]; then
          # 如果仓库不存在，创建私有仓库
          echo "创建新的私有仓库..."
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: JWT ${{ secrets.DOCKERHUB_TOKEN }}" \
            -d "{\"name\": \"${{ env.DOCKER_IMAGE_NAME }}\", \"is_private\": true}" \
            "https://hub.docker.com/v2/repositories/${{ secrets.DOCKERHUB_USERNAME }}/"
        elif [ "$STATUS" = "200" ]; then
          # 如果仓库存在，更新为私有
          echo "更新已存在的仓库为私有..."
          curl -X PATCH \
            -H "Content-Type: application/json" \
            -H "Authorization: JWT ${{ secrets.DOCKERHUB_TOKEN }}" \
            -d "{\"is_private\": true}" \
            "https://hub.docker.com/v2/repositories/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}/"
        else
          echo "错误：无法访问 DockerHub API，状态码: $STATUS"
          exit 1
        fi
    
    # 步骤6: 设置镜像仓库地址和标签
    - name: Set registry URL and tags
      run: |
        if [ "${{ github.event.inputs.registry_type }}" = "aliyun" ]; then
          # 阿里云镜像仓库
          if [ "${{ github.event.inputs.is_private }}" = "true" ]; then
            # 私有仓库
            echo "REGISTRY_URL=registry.${{ github.event.inputs.aliyun_region }}.aliyuncs.com" >> $GITHUB_ENV
          else
            # 公有仓库
            echo "REGISTRY_URL=registry-vpc.${{ github.event.inputs.aliyun_region }}.aliyuncs.com" >> $GITHUB_ENV
          fi
          echo "IMAGE_PATH=${{ github.event.inputs.aliyun_namespace }}/${{ env.DOCKER_IMAGE_NAME }}" >> $GITHUB_ENV
        else
          # DockerHub
          echo "REGISTRY_URL=docker.io" >> $GITHUB_ENV
          echo "IMAGE_PATH=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}" >> $GITHUB_ENV
        fi
    
    # 步骤7: 登录到镜像仓库
    - name: Login to Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY_URL }}
        username: ${{ github.event.inputs.registry_type == 'aliyun' && secrets.ALIYUN_USERNAME || secrets.DOCKERHUB_USERNAME }}
        password: ${{ github.event.inputs.registry_type == 'aliyun' && secrets.ALIYUN_PASSWORD || secrets.DOCKERHUB_TOKEN }}
        
    # 步骤8: 设置Docker Buildx构建器
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    # 步骤9: 构建并推送Docker镜像
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        # 指定 Dockerfile 路径
        file: ${{ github.event.inputs.dockerfile_path }}
        # 构建上下文为当前目录
        context: .
        # 启用推送到镜像仓库
        push: true
        # 设置镜像标签
        tags: |
          ${{ env.REGISTRY_URL }}/${{ env.IMAGE_PATH }}:latest
          ${{ env.REGISTRY_URL }}/${{ env.IMAGE_PATH }}:${{ env.TIMESTAMP }}