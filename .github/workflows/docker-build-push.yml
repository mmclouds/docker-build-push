name: Docker Build and Push

# 触发条件配置
on:
  # 手动触发工作流
  workflow_dispatch:
    inputs:
      # 需要构建的GitHub仓库地址
      repo_url:
        description: 'GitHub 仓库地址 (支持 owner/repo 或完整的 Git URL)'
        required: true
        type: string
      # 要构建的分支名称
      branch:
        description: '分支名称'
        required: true
        default: 'main'
        type: string
      # Dockerfile 路径
      dockerfile_path:
        description: 'Dockerfile 在仓库中的路径 (例如: ./Dockerfile)'
        required: true
        default: './Dockerfile'
        type: string
      # 选择推送到私有还是公有仓库
      registry_type:
        description: '镜像仓库类型 (public/private)'
        required: true
        type: choice
        options:
          - public
          - private
        default: 'public'
      # 私有仓库地址（如果选择私有仓库则必填）
      private_registry:
        description: '私有仓库地址（例如：registry.example.com）'
        required: false
        type: string

jobs:
  build:
    # 指定运行环境为最新版Ubuntu
    runs-on: ubuntu-latest
    
    steps:
    # 步骤1: 处理仓库地址格式
    - name: Process repository URL
      run: |
        REPO_URL="${{ github.event.inputs.repo_url }}"
        # 如果是完整的 Git URL，提取 owner/repo 部分
        if [[ $REPO_URL == *"github.com"* ]]; then
          REPO_URL=$(echo $REPO_URL | sed -E 's/.*github.com[\/:]([^\/]+\/[^\/]+)(\.git)?$/\1/')
        fi
        echo "REPO_NAME=$REPO_URL" >> $GITHUB_ENV
        
    # 步骤2: 检出指定的GitHub仓库代码
    - name: Checkout target repository
      uses: actions/checkout@v3
      with:
        repository: ${{ env.REPO_NAME }}
        ref: ${{ github.event.inputs.branch }}
        token: ${{ secrets.GH_TOKEN }}
    
    # 步骤3: 验证 Dockerfile 存在
    - name: Verify Dockerfile exists
      run: |
        if [ ! -f "${{ github.event.inputs.dockerfile_path }}" ]; then
          echo "错误：在路径 ${{ github.event.inputs.dockerfile_path }} 未找到 Dockerfile"
          exit 1
        fi
    
    # 步骤4: 设置时间戳变量
    - name: Set timestamp
      run: echo "TIMESTAMP=$(date +'%Y%m%d_%H%M%S')" >> $GITHUB_ENV
    
    # 步骤5: 设置镜像仓库地址变量
    - name: Set registry URL
      run: |
        if [ "${{ github.event.inputs.registry_type }}" = "private" ]; then
          echo "REGISTRY_URL=${{ github.event.inputs.private_registry }}" >> $GITHUB_ENV
        else
          echo "REGISTRY_URL=docker.io" >> $GITHUB_ENV
        fi
    
    # 步骤6: 登录到镜像仓库
    - name: Login to Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY_URL }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    # 步骤7: 设置Docker Buildx构建器
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    # 步骤8: 构建并推送Docker镜像
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        # 指定 Dockerfile 路径
        file: ${{ github.event.inputs.dockerfile_path }}
        # 构建上下文为当前目录
        context: .
        # 启用推送到镜像仓库
        push: true
        # 设置镜像标签，格式为：仓库地址/用户名/仓库名:标签
        tags: |
          ${{ env.REGISTRY_URL }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:latest
          ${{ env.REGISTRY_URL }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:${{ env.TIMESTAMP }}